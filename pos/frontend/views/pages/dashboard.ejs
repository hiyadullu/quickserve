<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QuickServe Dashboard</title>
    <link rel="stylesheet" href="/public/css/dashboard.css">
    <link rel="stylesheet" href="/public/css/sidebar.css">
</head>
<body>
    <!-- Sidebar -->
    <%- include('../partials/sidebar') %>

    <!-- Main Content -->
    <div class="main">
        <!-- Navbar -->
        <div class="navbar">
            <h2>All Orders</h2>
            <input type="text" placeholder="Search order...">
        </div>

        <!-- Order Sections -->
        <div class="orders-container">
            <!-- New Orders -->
            <div class="order-section" id="new-orders-section">
                <h3>NEW ORDERS <span class="count" id="new-count">0</span></h3>
            </div>

            <!-- Processing Orders -->
            <div class="order-section" id="processing-orders-section">
                <h3>PROCESSING <span class="count" id="processing-count">0</span></h3>
            </div>

            <!-- Processed Orders -->
            <div class="order-section" id="processed-orders-section">
                <h3>PROCESSED <span class="count" id="processed-count">0</span></h3>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast" id="toast">Order status updated!</div>

    <script>
        // API endpoints
        const API_ENDPOINTS = {
            getOrders: '/dashboard',
            updateStatus: '/dashboard/update-status'
        };

        // Initial orders data from backend
        const initialOrders = <%- JSON.stringify(orders) %>;

        // Fetch orders from backend
        async function fetchOrders() {
            try {
                const response = await fetch(API_ENDPOINTS.getOrders);
                if (!response.ok) {
                    throw new Error('Failed to fetch orders');
                }
                const data = await response.json();
                updateOrderDisplay(data.orders);
            } catch (error) {
                console.error('Error fetching orders:', error);
                // If fetch fails, use the initial orders
                updateOrderDisplay(initialOrders);
            }
        }

        // Update order status in backend
        async function updateOrderStatus(orderId, currentStatus, newStatus) {
            try {
                const response = await fetch(API_ENDPOINTS.updateStatus, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        order_id: orderId,
                        status: newStatus,
                        current_status: currentStatus
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to update order status');
                }
                
                // After successful update, fetch fresh orders
                fetchOrders();
                return true;
            } catch (error) {
                console.error('Error updating order status:', error);
                return false;
            }
        }

        // Update the display based on orders from backend
        function updateOrderDisplay(orders) {
            // Clear existing orders
            document.querySelectorAll('.order-card').forEach(card => card.remove());
            
            // Group orders by status
            const ordersByStatus = {
                pending: [],
                processing: [],
                ready: []
            };
            
            orders.forEach(order => {
                if (order.order_status in ordersByStatus) {
                    ordersByStatus[order.order_status].push(order);
                }
            });

            // Add orders to their respective sections
            addOrdersToSection('new-orders-section', ordersByStatus.pending, 'Move to Processing', 'process-btn');
            addOrdersToSection('processing-orders-section', ordersByStatus.processing, 'Mark as Ready', 'ready-btn');
            addOrdersToSection('processed-orders-section', ordersByStatus.ready, 'Handed Over', 'handed-over-btn');
            
            // Update counts
            updateCounts();
        }

        // Add orders to a specific section
        function addOrdersToSection(sectionId, orders, buttonText, buttonClass) {
            const section = document.getElementById(sectionId);
            
            orders.forEach(order => {
                const orderCard = document.createElement('div');
                orderCard.className = `order-card ${getStatusColor(order.order_status)}`;
                orderCard.id = `order-${order.order_id}`;
                
                // Format order time
                const orderTime = new Date(order.order_time);
                const formattedTime = orderTime.toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: true
                });
                
                // Format items with prices
                const itemsList = order.items.map(item => `
                    <div class="order-item">
                        <span class="item-name">${item.quantity} x ${item.name}</span>
                        <span class="item-price">₹${item.price} × ${item.quantity} = ₹${item.item_total}</span>
                    </div>
                `).join('');
                
                orderCard.innerHTML = `
                    <div class="order-header">
                        <p class="order-id">#${order.order_id}</p>
                        <p class="table-number">Table ${order.table_number}</p>
                    </div>
                    <div class="order-items">
                        ${itemsList}
                    </div>
                    <div class="order-footer">
                        <p class="order-time">Ordered at: ${formattedTime}</p>
                        <p class="payment-method">Payment: ${order.payment_method.toUpperCase()}</p>
                        <p class="total-amount">Total: ₹${order.total_amount}</p>
                    </div>
                    <button class="action-btn btn-animated ${buttonClass}" data-order-id="${order.order_id}">${buttonText}</button>
                `;
                
                section.appendChild(orderCard);
            });
        }

        // Get color based on order status
        function getStatusColor(status) {
            switch (status) {
                case 'pending': return 'red';
                case 'processing': return 'orange';
                case 'ready': return 'green';
                default: return 'gray';
            }
        }

        // Move order from new to processing
        async function moveToProcessing(orderId) {
            const orderCard = document.getElementById(`order-${orderId}`);
            const currentStatus = orderCard.classList.contains('red') ? 'pending' : 
                                orderCard.classList.contains('orange') ? 'processing' : 
                                orderCard.classList.contains('green') ? 'ready' : 'unknown';
            
            console.log(`Order #${orderId} current status:`, currentStatus);
            
            const success = await updateOrderStatus(orderId, 'pending', 'processing');
            if (success) {
                showToast(`Order #${orderId} moved to processing`);
                // Refresh the page after successful update
                window.location.reload();
            } else {
                showToast('Failed to update order status');
            }
        }

        // Move order from processing to ready
        async function moveToProcessed(orderId) {
            const orderCard = document.getElementById(`order-${orderId}`);
            
            const success = await updateOrderStatus(orderId, 'processing', 'ready');
            if (success) {
                showToast(`Order #${orderId} is ready for delivery`);
                // Refresh the page after successful update
                window.location.reload();
            } else {
                showToast('Failed to update order status');
            }
        }

        // Mark order as completed (handed over)
        async function removeOrder(orderId) {
            const orderCard = document.getElementById(`order-${orderId}`);
            
            const success = await updateOrderStatus(orderId, 'ready', 'completed');
            if (success) {
                showToast(`Order #${orderId} handed over`);
                // Refresh the page after successful update
                window.location.reload();
            } else {
                showToast('Failed to update order status');
            }
        }

        // Update count badges
        function updateCounts() {
            document.getElementById('new-count').textContent = document.querySelectorAll('#new-orders-section .order-card').length;
            document.getElementById('processing-count').textContent = document.querySelectorAll('#processing-orders-section .order-card').length;
            document.getElementById('processed-count').textContent = document.querySelectorAll('#processed-orders-section .order-card').length;
            
            // Check for empty sections
            checkEmptyState('new-orders-section');
            checkEmptyState('processing-orders-section');
            checkEmptyState('processed-orders-section');
        }
        
        // Check if a section is empty and add a placeholder
        function checkEmptyState(sectionId) {
            const section = document.getElementById(sectionId);
            const cards = section.querySelectorAll('.order-card');
            const existingEmpty = section.querySelector('.empty-state');
            
            if (cards.length === 0 && !existingEmpty) {
                const emptyMsg = document.createElement('div');
                emptyMsg.className = 'empty-state';
                emptyMsg.textContent = 'No orders in this section';
                section.appendChild(emptyMsg);
            } else if (cards.length > 0 && existingEmpty) {
                existingEmpty.remove();
            }
        }

        // Show toast notification
        function showToast(message) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Add ripple effect to buttons
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('action-btn')) {
                const x = e.clientX - e.target.getBoundingClientRect().left;
                const y = e.clientY - e.target.getBoundingClientRect().top;
                
                const ripple = document.createElement('span');
                ripple.style.position = 'absolute';
                ripple.style.width = '1px';
                ripple.style.height = '1px';
                ripple.style.borderRadius = '50%';
                ripple.style.transform = 'scale(0)';
                ripple.style.backgroundColor = 'rgba(255, 255, 255, 0.7)';
                ripple.style.left = x + 'px';
                ripple.style.top = y + 'px';
                ripple.style.animation = 'ripple 0.6s linear';
                
                e.target.appendChild(ripple);
                
                setTimeout(() => {
                    ripple.remove();
                }, 600);
            }
        });

        // Add hover effect to sidebar items
        document.querySelectorAll('.sidebar li').forEach(item => {
            item.addEventListener('mouseover', function() {
                this.style.paddingLeft = '25px';
            });
            item.addEventListener('mouseout', function() {
                this.style.paddingLeft = '20px';
            });
        });

        // Event delegation for all buttons
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('process-btn')) {
                const orderId = e.target.getAttribute('data-order-id');
                moveToProcessing(orderId);
            }
            
            if (e.target.classList.contains('ready-btn')) {
                const orderId = e.target.getAttribute('data-order-id');
                moveToProcessed(orderId);
            }
            
            if (e.target.classList.contains('handed-over-btn')) {
                const orderId = e.target.getAttribute('data-order-id');
                removeOrder(orderId);
            }
        });

        // Keyframes for ripple animation
        const style = document.createElement('style');
        style.innerHTML = `
            @keyframes ripple {
                to {
                    transform: scale(100);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);

        // Initialize with initial orders
        updateOrderDisplay(initialOrders);
        
        // Refresh page every 2 seconds
        setInterval(() => {
            window.location.reload();
        }, 2000);
    </script>
</body>
</html>